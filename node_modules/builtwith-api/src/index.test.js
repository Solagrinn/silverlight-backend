const nock = require('nock');
const BuiltWith = require('../src/index');

const apiKey = 'testApiKey';
const moduleParams = { isBulletProof: false };

describe('BuiltWith', () => {
  beforeEach(() => {
    nock('https://api.builtwith.com')
      .get(/.*/)
      .reply(200, { test: 'data' });
  });

  afterEach(() => {
    nock.cleanAll();
  });

  it('should make a standard request for the domain API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.domain('testUrl');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the lists API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.lists('testUrl');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the relationships API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.relationships('testUrl');

    expect(response).toEqual({ test: 'data' });
  });


  it('should make a standard request for the free API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.free('testUrl');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the keywords API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.keywords('testUrl');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the trends API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.trends('testUrl');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the companyToUrl API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.companyToUrl('My Company');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the domainLive API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.domainLive('testUrl');

    expect(response).toEqual({ test: 'data' });
  });

  it('should make a standard request for the trust API', async () => {
    const bw = BuiltWith(apiKey, moduleParams);

    const response = await bw.trust('testUrl');

    expect(response).toEqual({ test: 'data' });
  });
});
